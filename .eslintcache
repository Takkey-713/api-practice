[{"/Users/tksk/api-practice/api-practice/src/components/pages/main/addList/AddList.tsx":"1","/Users/tksk/api-practice/api-practice/src/components/pages/main/board/Board.tsx":"2","/Users/tksk/api-practice/api-practice/src/components/pages/main/task/Task.tsx":"3","/Users/tksk/api-practice/api-practice/src/reportWebVitals.ts":"4","/Users/tksk/api-practice/api-practice/src/components/pages/main/Main.tsx":"5","/Users/tksk/api-practice/api-practice/src/components/pages/modal/FormModal.tsx":"6","/Users/tksk/api-practice/api-practice/src/components/pages/modal/TaskBody.tsx":"7","/Users/tksk/api-practice/api-practice/src/index.tsx":"8","/Users/tksk/api-practice/api-practice/src/components/Home.tsx":"9","/Users/tksk/api-practice/api-practice/src/components/pages/header/Header.tsx":"10","/Users/tksk/api-practice/api-practice/src/components/requests/BoardRequest.ts":"11","/Users/tksk/api-practice/api-practice/src/components/auth/AuthForm.tsx":"12","/Users/tksk/api-practice/api-practice/src/components/requests/TaskRequest.ts":"13","/Users/tksk/api-practice/api-practice/src/components/requests/authRequest.ts":"14","/Users/tksk/api-practice/api-practice/src/components/requests/AuthRequest.ts":"15","/Users/tksk/api-practice/api-practice/src/components/hooks/useDataReducer.ts":"16","/Users/tksk/api-practice/api-practice/src/components/pages/modal/BoardModal.tsx":"17","/Users/tksk/api-practice/api-practice/src/components/interfaces/interface.ts":"18","/Users/tksk/api-practice/api-practice/src/App.tsx":"19","/Users/tksk/api-practice/api-practice/src/components/pages/search/SearchForm.tsx":"20","/Users/tksk/api-practice/api-practice/src/components/requests/SearchRequest.ts":"21"},{"size":1927,"mtime":1613835245715,"results":"22","hashOfConfig":"23"},{"size":5013,"mtime":1614833291465,"results":"24","hashOfConfig":"23"},{"size":1026,"mtime":1614906242273,"results":"25","hashOfConfig":"23"},{"size":425,"mtime":1611060678449,"results":"26","hashOfConfig":"23"},{"size":967,"mtime":1614832948391,"results":"27","hashOfConfig":"23"},{"size":1042,"mtime":1614851312856,"results":"28","hashOfConfig":"23"},{"size":4578,"mtime":1614906242274,"results":"29","hashOfConfig":"23"},{"size":292,"mtime":1614763164251,"results":"30","hashOfConfig":"23"},{"size":494,"mtime":1613714096789,"results":"31","hashOfConfig":"23"},{"size":800,"mtime":1614845602053,"results":"32","hashOfConfig":"23"},{"size":1227,"mtime":1613713252173,"results":"33","hashOfConfig":"23"},{"size":5205,"mtime":1614845179659,"results":"34","hashOfConfig":"23"},{"size":1460,"mtime":1614331308477,"results":"35","hashOfConfig":"23"},{"size":1116,"mtime":1613551607607,"results":"36","hashOfConfig":"23"},{"size":1208,"mtime":1613632214405,"results":"37","hashOfConfig":"23"},{"size":988,"mtime":1613711943829,"results":"38","hashOfConfig":"23"},{"size":4222,"mtime":1614921448849,"results":"39","hashOfConfig":"23"},{"size":341,"mtime":1614325377860,"results":"40","hashOfConfig":"23"},{"size":2876,"mtime":1614906242270,"results":"41","hashOfConfig":"23"},{"size":1324,"mtime":1614859240959,"results":"42","hashOfConfig":"23"},{"size":444,"mtime":1614858691458,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},"xb9whp",{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/tksk/api-practice/api-practice/src/components/pages/main/addList/AddList.tsx",["97"],"import React, { useState, useContext } from \"react\";\nimport { DataContext } from \"../../../../Guard\";\nimport styles from \"./AddList.module.css\";\nimport { BoardRequest } from \"../../../requests/BoardRequest\";\nimport { BoardType } from \"../../../interfaces/interface\";\n\nexport const AddList = () => {\n  const [boardDisplay, setBoardDisplay] = useState(true);\n  const [name, setName] = useState(\"\");\n  const { data, dispatch } = useContext(DataContext);\n\n  const newData: BoardType = {\n    id: 0,\n    name: name,\n  };\n\n  const onClickSubmit = async () => {\n    try {\n      const boards: BoardType[] = await BoardRequest(\"createBoards\", {\n        data: newData,\n      });\n      dispatch({ type: \"boardsUpdate\", payload: { board: boards } });\n      setBoardDisplay(!boardDisplay);\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n  };\n\n  return (\n    <>\n      {boardDisplay ? (\n        <div\n          className={styles.add_board}\n          onClick={() => setBoardDisplay(!boardDisplay)}\n        >\n          <div>\n            <span>+</span> <span>リストを追加する</span>\n          </div>\n        </div>\n      ) : (\n        <div className={styles.add_board_form}>\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              setName(e.target.value);\n            }}\n            className={styles.board_textarea}\n            placeholder=\"リストのタイトルを入力...\"\n          />\n          <div className={styles.add_submit_form}>\n            <input\n              type=\"submit\"\n              className={styles.add_list_submit}\n              value=\"リストを追加\"\n              onClick={onClickSubmit}\n            />\n            <div\n              className={styles.cancel_icon}\n              onClick={() => setBoardDisplay(!boardDisplay)}\n            >\n              ×\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n",["98","99"],"/Users/tksk/api-practice/api-practice/src/components/pages/main/board/Board.tsx",["100"],"/Users/tksk/api-practice/api-practice/src/components/pages/main/task/Task.tsx",[],"/Users/tksk/api-practice/api-practice/src/reportWebVitals.ts",[],["101","102"],"/Users/tksk/api-practice/api-practice/src/components/pages/main/Main.tsx",["103","104","105","106"],"/Users/tksk/api-practice/api-practice/src/components/pages/modal/FormModal.tsx",["107"],"/Users/tksk/api-practice/api-practice/src/components/pages/modal/TaskBody.tsx",["108"],"import React, { useState, useContext } from \"react\";\nimport styles from \"./style/TaskModal.module.css\";\nimport { TaskRequest } from \"../../requests/TaskRequest\";\nimport { TaskType, BoardType } from \"../../interfaces/interface\";\nimport { DataContext } from \"../../../App\";\n\ninterface Props {\n  task?: TaskType;\n  handleOnClose: () => void;\n  board: BoardType;\n}\n\nexport const TaskBody: React.FC<Props> = (props) => {\n  const { data, dispatch } = useContext(DataContext);\n  const [title, setTitle] = useState<string>(\n    (props.task && props.task.name) || \"\"\n  );\n  const [boardId, setBoardId] = useState<number>(\n    (props.task && props.task.board_id) || 0\n  );\n  const [explanation, setExplanation] = useState<string>(\n    (props.task && props.task.explanation) || \"\"\n  );\n  const [deadlineDate, setDeadlineDate] = useState<string>(\n    (props.task && props.task.deadline_date) || \"\"\n  );\n  const onClickSubmit = async () => {\n    const requestData = props.task\n      ? {\n          id: props.task && props.task.id,\n          name: title,\n          board_id: boardId,\n          explanation: explanation,\n          deadline_date: deadlineDate,\n        }\n      : {\n          name: title,\n          board_id: props.board.id,\n          explanation: explanation,\n          deadline_date: deadlineDate,\n        };\n\n    try {\n      const tasks: TaskType[] = await TaskRequest(\n        props.task ? \"updateTasks\" : \"createTasks\",\n        {\n          data: requestData,\n        }\n      );\n      dispatch({ type: \"tasksUpdate\", payload: { task: tasks } });\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n    props.handleOnClose();\n  };\n\n  const handleOnDelete = async () => {\n    const requestData = {\n      id: props.task && props.task.id,\n      name: title,\n      board_id: boardId,\n    };\n    try {\n      const tasks: TaskType[] = await TaskRequest(\"deleteTasks\", {\n        data: requestData,\n      });\n      dispatch({ type: \"tasksUpdate\", payload: { task: tasks } });\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n  };\n\n  return (\n    <form className={styles.modal_body}>\n      <h2 className={styles.input_menu}></h2>\n      <div>\n        <h4 className={styles.input_title}>タイトル</h4>\n        <textarea\n          className={styles.textArea}\n          value={title}\n          placeholder=\"タスクのタイトルを入力してください\"\n          onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n            setTitle(e.target.value)\n          }\n        />\n        <h4 className={styles.input_title}>説明</h4>\n        <textarea\n          className={styles.textArea}\n          placeholder=\"説明を記入してください\"\n          value={explanation}\n          onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n            setExplanation(e.target.value)\n          }\n        />\n        <h4 className={styles.input_title}>期限</h4>\n\n        <input\n          className={styles.input_date}\n          type=\"date\"\n          value={deadlineDate}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n            setDeadlineDate(e.target.value)\n          }\n        />\n        <div className={styles.deadline_date_msg}>\n          {props.task &&\n          props.task.deadline_date &&\n          new Date(props.task.deadline_date) < new Date()\n            ? \"※期限が過ぎています\"\n            : \"\"}\n        </div>\n        <h4 className={styles.input_title}>リスト</h4>\n        <select\n          className={styles.select}\n          value={props.task ? boardId : props.board.id}\n          onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n            setBoardId(Number(e.target.value))\n          }\n        >\n          {data.boards &&\n            data.boards.map((board: BoardType) => {\n              return props.task ? (\n                <option key={board.id} value={board.id}>\n                  {board.name}\n                </option>\n              ) : (\n                <option key={board.id} value={board.id}>\n                  {board.name}\n                </option>\n              );\n            })}\n        </select>\n      </div>\n\n      <input\n        className={styles.input_submit}\n        type=\"button\"\n        value={props.task ? \"タスクを更新する\" : \"タスクを追加する\"}\n        onClick={() => onClickSubmit()}\n      />\n\n      {props.task && (\n        <button\n          className={styles.delete_button}\n          type=\"button\"\n          onClick={handleOnDelete}\n        >\n          このタスクを削除する\n        </button>\n      )}\n    </form>\n  );\n};\n","/Users/tksk/api-practice/api-practice/src/index.tsx",[],"/Users/tksk/api-practice/api-practice/src/components/Home.tsx",["109","110","111"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Header } from \"./pages/header/Header\";\nimport { Main } from \"./pages/main/Main\";\nimport \"./Home.css\";\n\ninterface Props {\n  isLoggedIn: boolean;\n  handleOnLogout: () => void;\n}\n\nexport const Home: React.FC<Props> = (props) => {\n  return (\n    <div className=\"main\">\n      <Header\n        handleOnLogout={props.handleOnLogout}\n        isLoggedIn={props.isLoggedIn}\n      />\n      <Main />\n    </div>\n  );\n};\n",["112","113"],"/Users/tksk/api-practice/api-practice/src/components/pages/header/Header.tsx",["114"],"/Users/tksk/api-practice/api-practice/src/components/requests/BoardRequest.ts",[],["115","116"],"/Users/tksk/api-practice/api-practice/src/components/auth/AuthForm.tsx",[],"/Users/tksk/api-practice/api-practice/src/components/requests/TaskRequest.ts",[],"/Users/tksk/api-practice/api-practice/src/components/requests/authRequest.ts",[],"/Users/tksk/api-practice/api-practice/src/components/requests/AuthRequest.ts",[],["117","118"],"/Users/tksk/api-practice/api-practice/src/components/hooks/useDataReducer.ts",[],["119","120"],"/Users/tksk/api-practice/api-practice/src/components/pages/modal/BoardModal.tsx",["121"],"/Users/tksk/api-practice/api-practice/src/components/interfaces/interface.ts",[],"/Users/tksk/api-practice/api-practice/src/App.tsx",["122","123"],"import React, { useState, useEffect } from \"react\";\nimport { Home } from \"./components/Home\";\nimport { AuthForm } from \"./components/auth/AuthForm\";\nimport { AuthRequest } from \"./components/requests/AuthRequest\";\nimport { BoardRequest } from \"./components/requests/BoardRequest\";\nimport { TaskRequest } from \"./components/requests/TaskRequest\";\nimport { UserType } from \"./components/interfaces/interface\";\nimport {\n  Data,\n  dataAction,\n  useDataReducer,\n} from \"./components/hooks/useDataReducer\";\n\ntype dataContextType = {\n  data: Data;\n  dispatch: ({ type, payload }: dataAction) => void;\n};\n\nexport const DataContext = React.createContext<dataContextType>(\n  {} as dataContextType\n);\n\nexport const App: React.FC = () => {\n  // ここにtask,board,userのstateを管理する\b\n  const [data, dispatch] = useDataReducer();\n  // eslint-disable-next-line\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [user, setUser] = useState<UserType>({\n    id: 0,\n    email: \"\",\n  });\n  // eslint-disable-next-line\n  // userのstateは本アプリで必要になる\n  const handleOnChangeStatus = (user: UserType): void => {\n    setIsLoggedIn(!isLoggedIn);\n    setUser(user);\n  };\n\n  const handleOnLogout = async () => {\n    try {\n      const res = await AuthRequest(\"sign_out\");\n      if (!res.logged_in) {\n        setIsLoggedIn(!isLoggedIn);\n        setUser({ id: 0, email: \"\" });\n      }\n    } catch {\n      alert(\"通信に失敗しました。\");\n    }\n  };\n\n  const checkLoginStatus = async () => {\n    try {\n      const res = await AuthRequest(\"check_login\");\n      if (res.logged_in && isLoggedIn === false) {\n        setIsLoggedIn(true);\n        setUser(res.user);\n      } else if (res.status === 401) {\n        setIsLoggedIn(false);\n      }\n    } catch {\n      alert(\"通信に失敗しました\");\n    }\n  };\n\n  // 初回マウンティングした時にデータベースのボードとタスクを全て持ってくる\n  const fetchData = async () => {\n    const boards = await BoardRequest(\"fetchBoards\");\n    const tasks = await TaskRequest(\"fetchTasks\");\n    dispatch({ type: \"boardsUpdate\", payload: { board: boards } });\n    dispatch({ type: \"tasksUpdate\", payload: { task: tasks } });\n  };\n\n  useEffect(() => {\n    checkLoginStatus();\n  }, []);\n\n  useEffect(() => {\n    checkLoginStatus();\n    fetchData();\n  }, [user]);\n\n  useEffect(() => {\n    dispatch({\n      type: \"tasksUpdate\",\n      payload: { task: data.tasks },\n    });\n    // eslint-disable-next-line\n  }, [data.tasks]);\n\n  return (\n    <DataContext.Provider value={{ data, dispatch }}>\n      <>\n        {isLoggedIn ? (\n          <Home isLoggedIn={isLoggedIn} handleOnLogout={handleOnLogout} />\n        ) : (\n          <AuthForm\n            isLoggedIn={isLoggedIn}\n            handleOnChangeStatus={handleOnChangeStatus}\n          />\n        )}\n      </>\n    </DataContext.Provider>\n  );\n};\n",["124","125"],"/Users/tksk/api-practice/api-practice/src/components/pages/search/SearchForm.tsx",["126","127","128","129"],"/Users/tksk/api-practice/api-practice/src/components/requests/SearchRequest.ts",["130","131","132"],{"ruleId":"133","severity":1,"message":"134","line":10,"column":11,"nodeType":"135","messageId":"136","endLine":10,"endColumn":15},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"133","severity":1,"message":"134","line":22,"column":11,"nodeType":"135","messageId":"136","endLine":22,"endColumn":15},{"ruleId":"137","replacedBy":"141"},{"ruleId":"139","replacedBy":"142"},{"ruleId":"133","severity":1,"message":"143","line":1,"column":17,"nodeType":"135","messageId":"136","endLine":1,"endColumn":25},{"ruleId":"133","severity":1,"message":"144","line":8,"column":11,"nodeType":"135","messageId":"136","endLine":8,"endColumn":21},{"ruleId":"133","severity":1,"message":"145","line":12,"column":11,"nodeType":"135","messageId":"136","endLine":12,"endColumn":20},{"ruleId":"133","severity":1,"message":"146","line":17,"column":17,"nodeType":"135","messageId":"136","endLine":17,"endColumn":25},{"ruleId":"133","severity":1,"message":"143","line":1,"column":17,"nodeType":"135","messageId":"136","endLine":1,"endColumn":25},{"ruleId":"147","severity":1,"message":"148","line":75,"column":7,"nodeType":"149","endLine":75,"endColumn":41},{"ruleId":"133","severity":1,"message":"143","line":1,"column":17,"nodeType":"135","messageId":"136","endLine":1,"endColumn":25},{"ruleId":"133","severity":1,"message":"150","line":1,"column":27,"nodeType":"135","messageId":"136","endLine":1,"endColumn":36},{"ruleId":"133","severity":1,"message":"151","line":2,"column":8,"nodeType":"135","messageId":"136","endLine":2,"endColumn":13},{"ruleId":"137","replacedBy":"152"},{"ruleId":"139","replacedBy":"153"},{"ruleId":"133","severity":1,"message":"154","line":3,"column":8,"nodeType":"135","messageId":"136","endLine":3,"endColumn":23},{"ruleId":"137","replacedBy":"155"},{"ruleId":"139","replacedBy":"156"},{"ruleId":"137","replacedBy":"157"},{"ruleId":"139","replacedBy":"158"},{"ruleId":"137","replacedBy":"159"},{"ruleId":"139","replacedBy":"160"},{"ruleId":"133","severity":1,"message":"134","line":35,"column":11,"nodeType":"135","messageId":"136","endLine":35,"endColumn":15},{"ruleId":"161","severity":1,"message":"162","line":75,"column":6,"nodeType":"163","endLine":75,"endColumn":8,"suggestions":"164"},{"ruleId":"161","severity":1,"message":"165","line":80,"column":6,"nodeType":"163","endLine":80,"endColumn":12,"suggestions":"166"},{"ruleId":"137","replacedBy":"167"},{"ruleId":"139","replacedBy":"168"},{"ruleId":"133","severity":1,"message":"150","line":1,"column":27,"nodeType":"135","messageId":"136","endLine":1,"endColumn":36},{"ruleId":"133","severity":1,"message":"169","line":5,"column":10,"nodeType":"135","messageId":"136","endLine":5,"endColumn":23},{"ruleId":"133","severity":1,"message":"170","line":6,"column":10,"nodeType":"135","messageId":"136","endLine":6,"endColumn":18},{"ruleId":"133","severity":1,"message":"171","line":9,"column":10,"nodeType":"135","messageId":"136","endLine":9,"endColumn":20},{"ruleId":"133","severity":1,"message":"172","line":1,"column":8,"nodeType":"135","messageId":"136","endLine":1,"endColumn":13},{"ruleId":"133","severity":1,"message":"170","line":3,"column":10,"nodeType":"135","messageId":"136","endLine":3,"endColumn":18},{"ruleId":"133","severity":1,"message":"173","line":15,"column":9,"nodeType":"135","messageId":"136","endLine":15,"endColumn":20},"@typescript-eslint/no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["174"],"no-negated-in-lhs",["175"],["174"],["175"],"'useState' is defined but never used.","'BoardsType' is defined but never used.","'TasksType' is defined but never used.","'dispatch' is assigned a value but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'useEffect' is defined but never used.","'axios' is defined but never used.",["174"],["175"],"'DoneOutlineIcon' is defined but never used.",["174"],["175"],["174"],["175"],["174"],["175"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkLoginStatus'. Either include it or remove the dependency array.","ArrayExpression",["176"],"React Hook useEffect has missing dependencies: 'checkLoginStatus' and 'fetchData'. Either include them or remove the dependency array.",["177"],["174"],["175"],"'SearchRequest' is defined but never used.","'TaskType' is defined but never used.","'searchText' is assigned a value but never used.","'React' is defined but never used.","'searchTasks' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},"Update the dependencies array to be: [checkLoginStatus]",{"range":"182","text":"183"},"Update the dependencies array to be: [checkLoginStatus, fetchData, user]",{"range":"184","text":"185"},[2115,2117],"[checkLoginStatus]",[2187,2193],"[checkLoginStatus, fetchData, user]"]