[{"/Users/tksk/api-practice/api-practice/src/components/pages/main/addList/AddList.tsx":"1","/Users/tksk/api-practice/api-practice/src/components/pages/main/board/Board.tsx":"2","/Users/tksk/api-practice/api-practice/src/components/pages/main/task/Task.tsx":"3","/Users/tksk/api-practice/api-practice/src/reportWebVitals.ts":"4","/Users/tksk/api-practice/api-practice/src/components/pages/main/Main.tsx":"5","/Users/tksk/api-practice/api-practice/src/components/pages/modal/FormModal.tsx":"6","/Users/tksk/api-practice/api-practice/src/components/pages/modal/TaskBody.tsx":"7","/Users/tksk/api-practice/api-practice/src/index.tsx":"8","/Users/tksk/api-practice/api-practice/src/components/Home.tsx":"9","/Users/tksk/api-practice/api-practice/src/components/pages/header/Header.tsx":"10","/Users/tksk/api-practice/api-practice/src/components/requests/BoardRequest.ts":"11","/Users/tksk/api-practice/api-practice/src/components/auth/AuthForm.tsx":"12","/Users/tksk/api-practice/api-practice/src/components/requests/TaskRequest.ts":"13","/Users/tksk/api-practice/api-practice/src/components/requests/authRequest.ts":"14","/Users/tksk/api-practice/api-practice/src/components/requests/AuthRequest.ts":"15","/Users/tksk/api-practice/api-practice/src/components/hooks/useDataReducer.ts":"16","/Users/tksk/api-practice/api-practice/src/components/pages/modal/BoardModal.tsx":"17","/Users/tksk/api-practice/api-practice/src/components/interfaces/interface.ts":"18","/Users/tksk/api-practice/api-practice/src/App.tsx":"19","/Users/tksk/api-practice/api-practice/src/components/pages/search/SearchForm.tsx":"20","/Users/tksk/api-practice/api-practice/src/components/requests/SearchRequest.ts":"21","/Users/tksk/api-practice/api-practice/src/components/auth/AuthHeader.tsx":"22"},{"size":1925,"mtime":1614906242272,"results":"23","hashOfConfig":"24"},{"size":5036,"mtime":1615029663519,"results":"25","hashOfConfig":"24"},{"size":1026,"mtime":1614906242273,"results":"26","hashOfConfig":"24"},{"size":425,"mtime":1611060678449,"results":"27","hashOfConfig":"24"},{"size":967,"mtime":1614906242272,"results":"28","hashOfConfig":"24"},{"size":1042,"mtime":1615007064119,"results":"29","hashOfConfig":"24"},{"size":4572,"mtime":1615004692854,"results":"30","hashOfConfig":"24"},{"size":292,"mtime":1614906242276,"results":"31","hashOfConfig":"24"},{"size":494,"mtime":1614906242271,"results":"32","hashOfConfig":"24"},{"size":800,"mtime":1614906242272,"results":"33","hashOfConfig":"24"},{"size":1227,"mtime":1614906242275,"results":"34","hashOfConfig":"24"},{"size":5522,"mtime":1615029532582,"results":"35","hashOfConfig":"24"},{"size":1256,"mtime":1614906242275,"results":"36","hashOfConfig":"24"},{"size":1116,"mtime":1613551607607,"results":"37","hashOfConfig":"24"},{"size":1208,"mtime":1614906242275,"results":"38","hashOfConfig":"24"},{"size":988,"mtime":1614906242271,"results":"39","hashOfConfig":"24"},{"size":4285,"mtime":1615080898603,"results":"40","hashOfConfig":"24"},{"size":341,"mtime":1614325377860,"results":"41","hashOfConfig":"24"},{"size":2933,"mtime":1615038643057,"results":"42","hashOfConfig":"24"},{"size":1313,"mtime":1615030532059,"results":"43","hashOfConfig":"24"},{"size":444,"mtime":1614858691458,"results":"44","hashOfConfig":"24"},{"size":216,"mtime":1614950228747,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},"xb9whp",{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"49"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"49"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"49"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"49"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"49"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"/Users/tksk/api-practice/api-practice/src/components/pages/main/addList/AddList.tsx",["103"],"import React, { useState, useContext } from \"react\";\nimport { DataContext } from \"../../../../App\";\nimport styles from \"./AddList.module.css\";\nimport { BoardRequest } from \"../../../requests/BoardRequest\";\nimport { BoardType } from \"../../../interfaces/interface\";\n\nexport const AddList = () => {\n  const [boardDisplay, setBoardDisplay] = useState(true);\n  const [name, setName] = useState(\"\");\n  const { data, dispatch } = useContext(DataContext);\n\n  const newData: BoardType = {\n    id: 0,\n    name: name,\n  };\n\n  const onClickSubmit = async () => {\n    try {\n      const boards: BoardType[] = await BoardRequest(\"createBoards\", {\n        data: newData,\n      });\n      dispatch({ type: \"boardsUpdate\", payload: { board: boards } });\n      setBoardDisplay(!boardDisplay);\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n  };\n\n  return (\n    <>\n      {boardDisplay ? (\n        <div\n          className={styles.add_board}\n          onClick={() => setBoardDisplay(!boardDisplay)}\n        >\n          <div>\n            <span>+</span> <span>リストを追加する</span>\n          </div>\n        </div>\n      ) : (\n        <div className={styles.add_board_form}>\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              setName(e.target.value);\n            }}\n            className={styles.board_textarea}\n            placeholder=\"リストのタイトルを入力...\"\n          />\n          <div className={styles.add_submit_form}>\n            <input\n              type=\"submit\"\n              className={styles.add_list_submit}\n              value=\"リストを追加\"\n              onClick={onClickSubmit}\n            />\n            <div\n              className={styles.cancel_icon}\n              onClick={() => setBoardDisplay(!boardDisplay)}\n            >\n              ×\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n",["104","105"],"/Users/tksk/api-practice/api-practice/src/components/pages/main/board/Board.tsx",["106"],"import React, { useState, useContext, useRef } from \"react\";\nimport { BoardType, TaskType } from \"../../../interfaces/interface\";\nimport styles from \"./Board.module.css\";\nimport { Task } from \"../task/Task\";\nimport { BoardRequest } from \"../../../requests/BoardRequest\";\nimport { TaskRequest } from \"../../../requests/TaskRequest\";\nimport { DataContext } from \"../../../../App\";\nimport { BoardModal } from \"../../../../components/pages/modal/BoardModal\";\n\ninterface Props {\n  board: BoardType;\n  tasks?: TaskType[];\n}\n\nexport const Board: React.FC<Props> = (props) => {\n  const [boardOpen, setBoardOpen] = useState(true);\n  const [taskAddIsOpen, setTaskAddIsOpen] = useState<boolean>(false);\n  const [boardName, setBoardName] = useState(props.board.name);\n  const [taskName, setTaskName] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n\n  const { data, dispatch } = useContext(DataContext);\n  const ref = useRef<HTMLDivElement>(null);\n\n  const scrollToBottomOfList = React.useCallback(() => {\n    if (ref && ref.current) {\n      ref.current.scrollIntoView({\n        behavior: \"auto\",\n        block: \"end\",\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ref]);\n\n  const onClickSubmit = async () => {\n    const requestTaskData: TaskType = {\n      name: taskName,\n      board_id: props.board.id,\n    };\n\n    try {\n      const tasks: TaskType[] = await TaskRequest(\"createTasks\", {\n        data: requestTaskData,\n      });\n      dispatch({ type: \"tasksUpdate\", payload: { task: tasks } });\n      setTaskAddIsOpen(!taskAddIsOpen);\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n    scrollToBottomOfList();\n  };\n\n  const onKeySubmit = async (e: React.KeyboardEvent) => {\n    const requestBoardData: BoardType = {\n      id: props.board.id,\n      name: boardName,\n    };\n\n    if (e.key === \"Enter\") {\n      try {\n        const boards: BoardType[] = await BoardRequest(\"updateBoards\", {\n          data: requestBoardData,\n        });\n        dispatch({ type: \"boardsUpdate\", payload: { board: boards } });\n        setBoardOpen(!boardOpen);\n      } catch (err) {\n        alert(\"通信に失敗しました。\");\n      }\n    } else {\n      return false;\n    }\n  };\n\n  const handleOnBoardModalClose = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleOnBoardOpen = () => {\n    setBoardOpen(!boardOpen);\n    setBoardName(props.board.name);\n  };\n\n  const clickOnTaskAdd = () => {\n    setTaskAddIsOpen(!taskAddIsOpen);\n  };\n\n  return (\n    <div className={styles.contents}>\n      {boardOpen ? (\n        <div className={styles.board_name}>\n          <div\n            onClick={() => handleOnBoardOpen()}\n            className={styles.board_name_title}\n          >\n            {props.board.name}\n          </div>\n          <div className={styles.board_icon} onClick={() => setIsOpen(!isOpen)}>\n            :\n          </div>\n\n          <BoardModal\n            isOpen={isOpen}\n            board={props.board}\n            handleOnBoardModalClose={handleOnBoardModalClose}\n            tasks={props.tasks}\n          />\n        </div>\n      ) : (\n        <div className={styles.board_name}>\n          <textarea\n            className={styles.board_textarea}\n            placeholder={props.board.name}\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              setBoardName(e.target.value);\n            }}\n            onKeyPress={(e: React.KeyboardEvent) => onKeySubmit(e)}\n          />\n\n          <div\n            className={styles.board_cancel_btn}\n            onClick={() => setBoardOpen(!boardOpen)}\n          >\n            ×\n          </div>\n        </div>\n      )}\n      <div className={styles.task_lists}>\n        {props.tasks &&\n          props.tasks.map((task: TaskType) => {\n            return (\n              <div key={task.id}>\n                <Task task={task} board={props.board} />\n                <div className=\"scroll_ref\" ref={ref}></div>\n              </div>\n            );\n          })}\n      </div>\n      {taskAddIsOpen ? (\n        <>\n          <div className={styles.task_field}>\n            <textarea\n              placeholder=\"カードのタイトルを入力してください\"\n              className={styles.task_textarea}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                setTaskName(e.target.value)\n              }\n            />\n          </div>\n          <div className={styles.add_submit_form}>\n            <input\n              type=\"submit\"\n              className={styles.add_task_submit}\n              value=\"タスクを追加する\"\n              onClick={() => onClickSubmit()}\n            />\n            <div\n              className={styles.task_cancel_btn}\n              onClick={() => setTaskAddIsOpen(!taskAddIsOpen)}\n            >\n              ×\n            </div>\n          </div>\n        </>\n      ) : (\n        <div className={styles.add_task} onClick={() => clickOnTaskAdd()}>\n          <div> + タスクを追加する</div>\n        </div>\n      )}\n    </div>\n  );\n};\n",["107","108"],"/Users/tksk/api-practice/api-practice/src/components/pages/main/task/Task.tsx",[],["109","110"],"/Users/tksk/api-practice/api-practice/src/reportWebVitals.ts",[],["111","112"],"/Users/tksk/api-practice/api-practice/src/components/pages/main/Main.tsx",["113","114","115","116"],"import React, { useState, useContext } from \"react\";\nimport { DataContext } from \"../../../App\";\nimport { Board } from \"./board/Board\";\nimport { BoardType, TaskType } from \"../../interfaces/interface\";\nimport styles from \"./Main.module.css\";\nimport { AddList } from \"../main/addList/AddList\";\n\ninterface BoardsType {\n  boards: BoardType[];\n}\n\ninterface TasksType {\n  tasks: TaskType[];\n}\n\nexport const Main = () => {\n  const { data, dispatch } = useContext(DataContext);\n  return (\n    <div className={styles.main}>\n      {data.boards &&\n        data.boards.map((ele) => {\n          const tasks = data.tasks.filter((task) => {\n            return task.board_id === ele.id;\n          });\n          return (\n            <div key={ele.id} className={styles.board_list}>\n              <Board tasks={tasks} board={ele} key={ele.id} />\n            </div>\n          );\n        })}\n      <div className={styles.board_list}>\n        <AddList />\n      </div>\n    </div>\n  );\n};\n","/Users/tksk/api-practice/api-practice/src/components/pages/modal/FormModal.tsx",["117"],"import React, { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { TaskBody } from \"./TaskBody\";\nimport { BoardType, TaskType } from \"../../interfaces/interface\";\n\nconst styles = {\n  overlay: {\n    backgroundColor: \"rgba(0,0,0,.64)\",\n  },\n  content: {\n    top: \"10%\",\n    left: \"30%\",\n    right: \"50%\",\n    height: \"75vh\",\n    width: \"20vw\",\n    padding: \"2vw 10vw\",\n  },\n};\n\ninterface Props {\n  handleClose: () => void;\n  isOpen: boolean;\n  task?: TaskType;\n  board: BoardType;\n}\n\nexport const FormModal = (props: Props) => {\n  Modal.setAppElement(\"#root\");\n\n  return (\n    <div>\n      <Modal\n        isOpen={props.isOpen}\n        onRequestClose={props.handleClose}\n        style={styles}\n      >\n        {props.task ? (\n          <TaskBody\n            task={props.task}\n            handleOnClose={props.handleClose}\n            board={props.board}\n          />\n        ) : (\n          <TaskBody handleOnClose={props.handleClose} board={props.board} />\n        )}\n      </Modal>\n    </div>\n  );\n};\n\nexport default FormModal;\n","/Users/tksk/api-practice/api-practice/src/components/pages/modal/TaskBody.tsx",["118"],"import React, { useState, useContext } from \"react\";\nimport styles from \"./style/TaskModal.module.css\";\nimport { TaskRequest } from \"../../requests/TaskRequest\";\nimport { TaskType, BoardType } from \"../../interfaces/interface\";\nimport { DataContext } from \"../../../App\";\n\ninterface Props {\n  task?: TaskType;\n  handleOnClose: () => void;\n  board: BoardType;\n}\n\nexport const TaskBody: React.FC<Props> = (props) => {\n  const { data, dispatch } = useContext(DataContext);\n  const [title, setTitle] = useState<string>(\n    (props.task && props.task.name) || \"\"\n  );\n  const [boardId, setBoardId] = useState<number>(\n    (props.task && props.task.board_id) || 0\n  );\n  const [explanation, setExplanation] = useState<string>(\n    (props.task && props.task.explanation) || \"\"\n  );\n  const [deadlineDate, setDeadlineDate] = useState<string>(\n    (props.task && props.task.deadline_date) || \"\"\n  );\n  const onClickSubmit = async () => {\n    const requestData = props.task\n      ? {\n          id: props.task && props.task.id,\n          name: title,\n          board_id: boardId,\n          explanation: explanation,\n          deadline_date: deadlineDate,\n        }\n      : {\n          name: title,\n          board_id: props.board.id,\n          explanation: explanation,\n          deadline_date: deadlineDate,\n        };\n\n    try {\n      const tasks: TaskType[] = await TaskRequest(\n        props.task ? \"updateTasks\" : \"createTasks\",\n        {\n          data: requestData,\n        }\n      );\n      dispatch({ type: \"tasksUpdate\", payload: { task: tasks } });\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n    props.handleOnClose();\n  };\n\n  const handleOnDelete = async () => {\n    const requestData = {\n      id: props.task && props.task.id,\n      name: title,\n      board_id: boardId,\n    };\n    try {\n      const tasks: TaskType[] = await TaskRequest(\"deleteTasks\", {\n        data: requestData,\n      });\n      dispatch({ type: \"tasksUpdate\", payload: { task: tasks } });\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n  };\n\n  return (\n    <form className={styles.modal_body}>\n      <h2 className={styles.input_menu}></h2>\n      <div>\n        <h4 className={styles.input_title}>タイトル</h4>\n        <textarea\n          className={styles.textArea}\n          value={title}\n          placeholder=\"タスクのタイトルを入力してください\"\n          onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n            setTitle(e.target.value)\n          }\n        />\n        <h4 className={styles.input_title}>説明</h4>\n        <textarea\n          className={styles.textArea}\n          placeholder=\"説明を記入してください\"\n          value={explanation}\n          onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n            setExplanation(e.target.value)\n          }\n        />\n        <h4 className={styles.input_title}>期限</h4>\n\n        <input\n          className={styles.input_date}\n          type=\"date\"\n          value={deadlineDate}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n            setDeadlineDate(e.target.value)\n          }\n        />\n        <div className={styles.deadline_date_msg}>\n          {props.task &&\n          props.task.deadline_date &&\n          new Date(props.task.deadline_date) < new Date()\n            ? \"※期限が過ぎています\"\n            : \"\"}\n        </div>\n        <h4 className={styles.input_title}>リスト</h4>\n        <select\n          className={styles.select}\n          value={props.task ? boardId : props.board.id}\n          onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n            setBoardId(Number(e.target.value))\n          }\n        >\n          {data.boards &&\n            data.boards.map((board: BoardType) => {\n              return props.task ? (\n                <option key={board.id} value={board.id}>\n                  {board.name}\n                </option>\n              ) : (\n                <option key={board.id} value={board.id}>\n                  {board.name}\n                </option>\n              );\n            })}\n        </select>\n      </div>\n\n      <input\n        className={styles.input_submit}\n        type=\"button\"\n        value={props.task ? \"タスクを更新する\" : \"タスクを追加する\"}\n        onClick={() => onClickSubmit()}\n      />\n\n      {props.task && (\n        <button\n          className={styles.delete_button}\n          type=\"button\"\n          onClick={handleOnDelete}\n        >\n          タスクを削除する\n        </button>\n      )}\n    </form>\n  );\n};\n","/Users/tksk/api-practice/api-practice/src/index.tsx",[],"/Users/tksk/api-practice/api-practice/src/components/Home.tsx",["119","120","121"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Header } from \"./pages/header/Header\";\nimport { Main } from \"./pages/main/Main\";\nimport \"./Home.css\";\n\ninterface Props {\n  isLoggedIn: boolean;\n  handleOnLogout: () => void;\n}\n\nexport const Home: React.FC<Props> = (props) => {\n  return (\n    <div className=\"main\">\n      <Header\n        handleOnLogout={props.handleOnLogout}\n        isLoggedIn={props.isLoggedIn}\n      />\n      <Main />\n    </div>\n  );\n};\n","/Users/tksk/api-practice/api-practice/src/components/pages/header/Header.tsx",["122"],"import React from \"react\";\nimport styles from \"./Header.module.css\";\nimport DoneOutlineIcon from \"@material-ui/icons/DoneOutline\";\nimport { SearchForm } from \"../search/SearchForm\";\n\ninterface Props {\n  handleOnLogout: () => void;\n  isLoggedIn: boolean;\n}\nexport const Header: React.FC<Props> = (props) => {\n  return (\n    <div className={styles.header}>\n      <div className={styles.header_search_area}>\n        <SearchForm />\n      </div>\n\n      <div className={styles.header_title_list}>\n        <div className={styles.header_title}>Task App</div>\n      </div>\n\n      <div className={styles.header_list}>\n        <ul className={styles.ul}>\n          <li className={styles.li} onClick={() => props.handleOnLogout()}>\n            Logout\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n","/Users/tksk/api-practice/api-practice/src/components/requests/BoardRequest.ts",[],"/Users/tksk/api-practice/api-practice/src/components/auth/AuthForm.tsx",[],"/Users/tksk/api-practice/api-practice/src/components/requests/TaskRequest.ts",[],"/Users/tksk/api-practice/api-practice/src/components/requests/authRequest.ts",[],"/Users/tksk/api-practice/api-practice/src/components/requests/AuthRequest.ts",[],"/Users/tksk/api-practice/api-practice/src/components/hooks/useDataReducer.ts",[],"/Users/tksk/api-practice/api-practice/src/components/pages/modal/BoardModal.tsx",["123","124"],"import React, { useState, useContext } from \"react\";\nimport Modal from \"react-modal\";\nimport { BoardType, TaskType } from \"../../interfaces/interface\";\nimport { BoardRequest } from \"../../requests/BoardRequest\";\nimport { TaskRequest } from \"../../requests/TaskRequest\";\nimport { DataContext } from \"../../../App\";\nimport { FormModal } from \"./FormModal\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport styles from \"./style/boardModal.module.css\";\nimport { useMediaQuery } from \"react-responsive\";\n\nconst Style = {\n  overlay: {\n    backgroundColor: \"transparent\",\n  },\n  content: {\n    top: \"10%\",\n    left: \"30%\",\n    right: \"50%\",\n    height: \"75vh\",\n    width: \"20vw\",\n    padding: \"2vw 10vw\",\n  },\n};\n\ninterface Props {\n  isOpen: boolean;\n  board: BoardType;\n  handleOnBoardModalClose: () => void;\n  tasks?: TaskType[];\n}\n\nModal.setAppElement(\"#root\");\n\nexport const BoardModal: React.FC<Props> = (props) => {\n  const { data, dispatch } = useContext(DataContext);\n  const [isTaskOpen, setIsTaskOpen] = useState(false);\n  // 既存のタスクをモーダルで表示するためのstate\n  const [isShown, setIsShown] = useState(false);\n  // 新規タスクを追加するためのモーダルを表示するためのstate\n\n  const handleOnDeleteBoard = async () => {\n    const requestData = {\n      id: props.board && props.board.id,\n      name: props.board && props.board.name,\n    };\n    try {\n      const boards: BoardType[] = await BoardRequest(\"deleteBoards\", {\n        data: requestData,\n      });\n\n      props.handleOnBoardModalClose();\n      dispatch({ type: \"boardsUpdate\", payload: { board: boards } });\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n  };\n\n  const handleOnDelete = async (task: TaskType) => {\n    const requestData = {\n      id: task.id,\n      name: task.name,\n      board_id: task.board_id,\n    };\n    try {\n      const tasks: TaskType[] = await TaskRequest(\"deleteTasks\", {\n        data: requestData,\n      });\n      dispatch({ type: \"tasksUpdate\", payload: { task: tasks } });\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n  };\n\n  const handleOnTaskModal = () => {\n    setIsTaskOpen(!isTaskOpen);\n  };\n\n  const handleAddTaksModal = () => {\n    setIsShown(!isShown);\n  };\n\n  return (\n    <div>\n      <Modal\n        isOpen={props.isOpen}\n        onRequestClose={props.handleOnBoardModalClose}\n        style={Style}\n      >\n        <div className={styles.modal_body}>\n          <div className={styles.board_title}>{props.board.name}</div>\n          <div className={styles.task_lists}>\n            {props.tasks &&\n              props.tasks.map((task) => {\n                return (\n                  <div className={styles.task_field} key={task.id}>\n                    <div\n                      className={styles.task_name}\n                      onClick={() => handleOnTaskModal()}\n                    >\n                      {task.name}\n                    </div>\n                    <DeleteIcon\n                      onClick={() => handleOnDelete(task)}\n                      style={{\n                        fontSize: \"20px\",\n                        cursor: \"pointer\",\n                        margin: \"2px 0px 0px 10px\",\n                      }}\n                    />\n                    <FormModal\n                      isOpen={isTaskOpen}\n                      handleClose={handleOnTaskModal}\n                      task={task}\n                      board={props.board}\n                      key={task.id}\n                    />\n                  </div>\n                );\n              })}\n          </div>\n          <div className={styles.add_option}>\n            <button\n              className={styles.add_task_btn}\n              onClick={() => setIsShown(!isShown)}\n            >\n              タスクを追加する\n            </button>\n            <FormModal\n              isOpen={isShown}\n              handleClose={handleAddTaksModal}\n              board={props.board}\n            />\n            <button\n              className={styles.board_delete_btn}\n              type=\"button\"\n              onClick={handleOnDeleteBoard}\n            >\n              このリストを削除する\n            </button>\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n","/Users/tksk/api-practice/api-practice/src/components/interfaces/interface.ts",[],"/Users/tksk/api-practice/api-practice/src/App.tsx",["125"],"/Users/tksk/api-practice/api-practice/src/components/pages/search/SearchForm.tsx",["126","127","128"],"import React, { useState } from \"react\";\nimport styles from \"./Search.module.css\";\nimport { TextField } from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { SearchRequest } from \"../../requests/SearchRequest\";\nimport { TaskType } from \"../../interfaces/interface\";\n\nexport const SearchForm = () => {\n  const [searchText, setSearchText] = useState(\"\");\n  const [isShown, setIsShown] = useState(false);\n\n  const handleOnSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchText(e.target.value);\n    // searchTasks();\n  };\n\n  // const searchTasks = async () => {\n  //   const requetData = {\n  //     data: searchText,\n  //   };\n  //   try {\n  //     const tasks = await SearchRequest(requetData);\n  //   } catch (err) {\n  //     alert(\"通信に失敗しました。\");\n  //   }\n  // };\n\n  return (\n    <>\n      <form className={styles.search_form}>\n        <TextField\n          className={styles.search_field}\n          margin=\"none\"\n          required\n          fullWidth\n          id=\"searchInput\"\n          onClick={(e) => setIsShown(!isShown)}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n            handleOnSearch(e)\n          }\n        />\n        <SearchIcon style={{ marginTop: \"7px\", cursor: \"pointer\" }} />\n      </form>\n    </>\n  );\n};\n","/Users/tksk/api-practice/api-practice/src/components/requests/SearchRequest.ts",["129","130","131"],"/Users/tksk/api-practice/api-practice/src/components/auth/AuthHeader.tsx",[],{"ruleId":"132","severity":1,"message":"133","line":10,"column":11,"nodeType":"134","messageId":"135","endLine":10,"endColumn":15},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"132","severity":1,"message":"133","line":22,"column":11,"nodeType":"134","messageId":"135","endLine":22,"endColumn":15},{"ruleId":"136","replacedBy":"140"},{"ruleId":"138","replacedBy":"141"},{"ruleId":"136","replacedBy":"142"},{"ruleId":"138","replacedBy":"143"},{"ruleId":"136","replacedBy":"144"},{"ruleId":"138","replacedBy":"145"},{"ruleId":"132","severity":1,"message":"146","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":25},{"ruleId":"132","severity":1,"message":"147","line":8,"column":11,"nodeType":"134","messageId":"135","endLine":8,"endColumn":21},{"ruleId":"132","severity":1,"message":"148","line":12,"column":11,"nodeType":"134","messageId":"135","endLine":12,"endColumn":20},{"ruleId":"132","severity":1,"message":"149","line":17,"column":17,"nodeType":"134","messageId":"135","endLine":17,"endColumn":25},{"ruleId":"132","severity":1,"message":"146","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":25},{"ruleId":"150","severity":1,"message":"151","line":75,"column":7,"nodeType":"152","endLine":75,"endColumn":41},{"ruleId":"132","severity":1,"message":"146","line":1,"column":17,"nodeType":"134","messageId":"135","endLine":1,"endColumn":25},{"ruleId":"132","severity":1,"message":"153","line":1,"column":27,"nodeType":"134","messageId":"135","endLine":1,"endColumn":36},{"ruleId":"132","severity":1,"message":"154","line":2,"column":8,"nodeType":"134","messageId":"135","endLine":2,"endColumn":13},{"ruleId":"132","severity":1,"message":"155","line":3,"column":8,"nodeType":"134","messageId":"135","endLine":3,"endColumn":23},{"ruleId":"132","severity":1,"message":"156","line":10,"column":10,"nodeType":"134","messageId":"135","endLine":10,"endColumn":23},{"ruleId":"132","severity":1,"message":"133","line":36,"column":11,"nodeType":"134","messageId":"135","endLine":36,"endColumn":15},{"ruleId":null,"fatal":true,"severity":2,"message":"157","line":80,"column":29},{"ruleId":"132","severity":1,"message":"158","line":5,"column":10,"nodeType":"134","messageId":"135","endLine":5,"endColumn":23},{"ruleId":"132","severity":1,"message":"159","line":6,"column":10,"nodeType":"134","messageId":"135","endLine":6,"endColumn":18},{"ruleId":"132","severity":1,"message":"160","line":9,"column":10,"nodeType":"134","messageId":"135","endLine":9,"endColumn":20},{"ruleId":"132","severity":1,"message":"161","line":1,"column":8,"nodeType":"134","messageId":"135","endLine":1,"endColumn":13},{"ruleId":"132","severity":1,"message":"159","line":3,"column":10,"nodeType":"134","messageId":"135","endLine":3,"endColumn":18},{"ruleId":"132","severity":1,"message":"162","line":15,"column":9,"nodeType":"134","messageId":"135","endLine":15,"endColumn":20},"@typescript-eslint/no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["163"],"no-negated-in-lhs",["164"],["163"],["164"],["163"],["164"],["163"],["164"],"'useState' is defined but never used.","'BoardsType' is defined but never used.","'TasksType' is defined but never used.","'dispatch' is assigned a value but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'useEffect' is defined but never used.","'axios' is defined but never used.","'DoneOutlineIcon' is defined but never used.","'useMediaQuery' is defined but never used.","Parsing error: ';' expected.","'SearchRequest' is defined but never used.","'TaskType' is defined but never used.","'searchText' is assigned a value but never used.","'React' is defined but never used.","'searchTasks' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]