[{"/Users/tksk/api-practice/api-practice/src/components/pages/main/addList/AddList.tsx":"1","/Users/tksk/api-practice/api-practice/src/Guard.tsx":"2","/Users/tksk/api-practice/api-practice/src/components/pages/main/board/Board.tsx":"3","/Users/tksk/api-practice/api-practice/src/components/pages/main/task/Task.tsx":"4","/Users/tksk/api-practice/api-practice/src/reportWebVitals.ts":"5","/Users/tksk/api-practice/api-practice/src/components/pages/main/Main.tsx":"6","/Users/tksk/api-practice/api-practice/src/components/pages/modal/FormModal.tsx":"7","/Users/tksk/api-practice/api-practice/src/components/pages/modal/TaskBody.tsx":"8","/Users/tksk/api-practice/api-practice/src/index.tsx":"9","/Users/tksk/api-practice/api-practice/src/components/Home.tsx":"10","/Users/tksk/api-practice/api-practice/src/components/pages/header/Header.tsx":"11","/Users/tksk/api-practice/api-practice/src/components/requests/BoardRequest.ts":"12","/Users/tksk/api-practice/api-practice/src/components/auth/AuthForm.tsx":"13","/Users/tksk/api-practice/api-practice/src/components/requests/TaskRequest.ts":"14","/Users/tksk/api-practice/api-practice/src/components/requests/authRequest.ts":"15","/Users/tksk/api-practice/api-practice/src/components/requests/AuthRequest.ts":"16","/Users/tksk/api-practice/api-practice/src/components/hooks/useDataReducer.ts":"17","/Users/tksk/api-practice/api-practice/src/components/pages/modal/BoardModal.tsx":"18","/Users/tksk/api-practice/api-practice/src/components/interfaces/interface.ts":"19","/Users/tksk/api-practice/api-practice/src/components/pages/main/boardMenu/BoardMenu.tsx":"20"},{"size":1927,"mtime":1613835245715,"results":"21","hashOfConfig":"22"},{"size":2878,"mtime":1614331063166,"results":"23","hashOfConfig":"22"},{"size":5138,"mtime":1614750911438,"results":"24","hashOfConfig":"22"},{"size":1096,"mtime":1614401384671,"results":"25","hashOfConfig":"22"},{"size":425,"mtime":1611060678449,"results":"26","hashOfConfig":"22"},{"size":969,"mtime":1613726285741,"results":"27","hashOfConfig":"22"},{"size":972,"mtime":1614061669443,"results":"28","hashOfConfig":"22"},{"size":3937,"mtime":1614417222724,"results":"29","hashOfConfig":"22"},{"size":298,"mtime":1613013402188,"results":"30","hashOfConfig":"22"},{"size":494,"mtime":1613714096789,"results":"31","hashOfConfig":"22"},{"size":836,"mtime":1614324633973,"results":"32","hashOfConfig":"22"},{"size":1227,"mtime":1613713252173,"results":"33","hashOfConfig":"22"},{"size":5205,"mtime":1614330264433,"results":"34","hashOfConfig":"22"},{"size":1460,"mtime":1614331308477,"results":"35","hashOfConfig":"22"},{"size":1116,"mtime":1613551607607,"results":"36","hashOfConfig":"22"},{"size":1208,"mtime":1613632214405,"results":"37","hashOfConfig":"22"},{"size":988,"mtime":1613711943829,"results":"38","hashOfConfig":"22"},{"size":1630,"mtime":1614409280595,"results":"39","hashOfConfig":"22"},{"size":341,"mtime":1614325377860,"results":"40","hashOfConfig":"22"},{"size":248,"mtime":1614740734656,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},"xb9whp",{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"45"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"68"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"45"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/tksk/api-practice/api-practice/src/components/pages/main/addList/AddList.tsx",["95"],"import React, { useState, useContext } from \"react\";\nimport { DataContext } from \"../../../../Guard\";\nimport styles from \"./AddList.module.css\";\nimport { BoardRequest } from \"../../../requests/BoardRequest\";\nimport { BoardType } from \"../../../interfaces/interface\";\n\nexport const AddList = () => {\n  const [boardDisplay, setBoardDisplay] = useState(true);\n  const [name, setName] = useState(\"\");\n  const { data, dispatch } = useContext(DataContext);\n\n  const newData: BoardType = {\n    id: 0,\n    name: name,\n  };\n\n  const onClickSubmit = async () => {\n    try {\n      const boards: BoardType[] = await BoardRequest(\"createBoards\", {\n        data: newData,\n      });\n      dispatch({ type: \"boardsUpdate\", payload: { board: boards } });\n      setBoardDisplay(!boardDisplay);\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n  };\n\n  return (\n    <>\n      {boardDisplay ? (\n        <div\n          className={styles.add_board}\n          onClick={() => setBoardDisplay(!boardDisplay)}\n        >\n          <div>\n            <span>+</span> <span>リストを追加する</span>\n          </div>\n        </div>\n      ) : (\n        <div className={styles.add_board_form}>\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              setName(e.target.value);\n            }}\n            className={styles.board_textarea}\n            placeholder=\"リストのタイトルを入力...\"\n          />\n          <div className={styles.add_submit_form}>\n            <input\n              type=\"submit\"\n              className={styles.add_list_submit}\n              value=\"リストを追加\"\n              onClick={onClickSubmit}\n            />\n            <div\n              className={styles.cancel_icon}\n              onClick={() => setBoardDisplay(!boardDisplay)}\n            >\n              ×\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n",["96","97"],"/Users/tksk/api-practice/api-practice/src/Guard.tsx",["98","99"],"import React, { useState, useEffect } from \"react\";\nimport { Home } from \"./components/Home\";\nimport { AuthForm } from \"./components/auth/AuthForm\";\nimport { AuthRequest } from \"./components/requests/AuthRequest\";\nimport { BoardRequest } from \"./components/requests/BoardRequest\";\nimport { TaskRequest } from \"./components/requests/TaskRequest\";\nimport { UserType } from \"./components/interfaces/interface\";\nimport {\n  Data,\n  dataAction,\n  useDataReducer,\n} from \"./components/hooks/useDataReducer\";\n\ntype dataContextType = {\n  data: Data;\n  dispatch: ({ type, payload }: dataAction) => void;\n};\n\nexport const DataContext = React.createContext<dataContextType>(\n  {} as dataContextType\n);\n\nexport const Guard: React.FC = () => {\n  // ここにtask,board,userのstateを管理する\b\n  const [data, dispatch] = useDataReducer();\n  // eslint-disable-next-line\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [user, setUser] = useState<UserType>({\n    id: 0,\n    email: \"\",\n  });\n  // eslint-disable-next-line\n  // userのstateは本アプリで必要になる\n  const handleOnChangeStatus = (user: UserType): void => {\n    setIsLoggedIn(!isLoggedIn);\n    setUser(user);\n  };\n\n  const handleOnLogout = async () => {\n    try {\n      const res = await AuthRequest(\"sign_out\");\n      if (!res.logged_in) {\n        setIsLoggedIn(!isLoggedIn);\n        setUser({ id: 0, email: \"\" });\n      }\n    } catch {\n      alert(\"通信に失敗しました。\");\n    }\n  };\n\n  const checkLoginStatus = async () => {\n    try {\n      const res = await AuthRequest(\"check_login\");\n      if (res.logged_in && isLoggedIn === false) {\n        setIsLoggedIn(true);\n        setUser(res.user);\n      } else if (res.status === 401) {\n        setIsLoggedIn(false);\n      }\n    } catch {\n      alert(\"通信に失敗しました\");\n    }\n  };\n\n  // 初回マウンティングした時にデータベースのボードとタスクを全て持ってくる\n  const fetchData = async () => {\n    const boards = await BoardRequest(\"fetchBoards\");\n    const tasks = await TaskRequest(\"fetchTasks\");\n    dispatch({ type: \"boardsUpdate\", payload: { board: boards } });\n    dispatch({ type: \"tasksUpdate\", payload: { task: tasks } });\n  };\n\n  useEffect(() => {\n    checkLoginStatus();\n  }, []);\n\n  useEffect(() => {\n    checkLoginStatus();\n    fetchData();\n  }, [user]);\n\n  useEffect(() => {\n    dispatch({\n      type: \"tasksUpdate\",\n      payload: { task: data.tasks },\n    });\n    // eslint-disable-next-line\n  }, [data.tasks]);\n\n  return (\n    <DataContext.Provider value={{ data, dispatch }}>\n      <>\n        {isLoggedIn ? (\n          <Home isLoggedIn={isLoggedIn} handleOnLogout={handleOnLogout} />\n        ) : (\n          <AuthForm\n            isLoggedIn={isLoggedIn}\n            handleOnChangeStatus={handleOnChangeStatus}\n          />\n        )}\n      </>\n    </DataContext.Provider>\n  );\n};\n",["100","101"],"/Users/tksk/api-practice/api-practice/src/components/pages/main/board/Board.tsx",["102","103"],"/Users/tksk/api-practice/api-practice/src/components/pages/main/task/Task.tsx",["104"],"import React, { useState } from \"react\";\nimport { BoardType, TaskType } from \"../../../interfaces/interface\";\nimport styles from \"./Task.module.css\";\nimport QueryBuilderIcon from \"@material-ui/icons/QueryBuilder\";\n// このアイコンはモーダルのタスクで使用する\nimport { FormModal } from \"../../modal/FormModal\";\n\ninterface Props {\n  task: TaskType;\n  board: BoardType;\n}\n\nexport const Task: React.FC<Props> = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const handleOpen = () => {\n    setIsOpen(true);\n  };\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n\n  return (\n    <>\n      <div\n        className={styles.task_field}\n        onClick={handleOpen}\n        style={{\n          backgroundColor:\n            props.task.deadline_date &&\n            new Date(props.task.deadline_date) < new Date()\n              ? \"rgb(250, 194, 194)\"\n              : \"white\",\n        }}\n      >\n        <div className={styles.task_name}>{props.task.name}</div>\n      </div>\n\n      <FormModal handleClose={handleClose} isOpen={isOpen} task={props.task} />\n    </>\n  );\n};\n","/Users/tksk/api-practice/api-practice/src/reportWebVitals.ts",[],"/Users/tksk/api-practice/api-practice/src/components/pages/main/Main.tsx",["105","106","107","108"],"import React, { useState, useContext } from \"react\";\nimport { DataContext } from \"../../../Guard\";\nimport { Board } from \"./board/Board\";\nimport { BoardType, TaskType } from \"../../interfaces/interface\";\nimport styles from \"./Main.module.css\";\nimport { AddList } from \"../main/addList/AddList\";\n\ninterface BoardsType {\n  boards: BoardType[];\n}\n\ninterface TasksType {\n  tasks: TaskType[];\n}\n\nexport const Main = () => {\n  const { data, dispatch } = useContext(DataContext);\n  return (\n    <div className={styles.main}>\n      {data.boards &&\n        data.boards.map((ele) => {\n          const tasks = data.tasks.filter((task) => {\n            return task.board_id === ele.id;\n          });\n          return (\n            <div key={ele.id} className={styles.board_list}>\n              <Board tasks={tasks} board={ele} key={ele.id} />\n            </div>\n          );\n        })}\n      <div className={styles.board_list}>\n        <AddList />\n      </div>\n    </div>\n  );\n};\n","/Users/tksk/api-practice/api-practice/src/components/pages/modal/FormModal.tsx",["109"],"import React, { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { TaskBody } from \"./TaskBody\";\nimport { TaskType } from \"../../interfaces/interface\";\n\nconst styles = {\n  overlay: {\n    backgroundColor: \"rgba(0,0,0,.32)\",\n  },\n  content: {\n    top: \"10%\",\n    left: \"60%\",\n    right: \"50%\",\n    height: \"75vh\",\n    width: \"20vw\",\n    marginLeft: \"-30vw\",\n    padding: \"2vw 10vw\",\n  },\n};\n\ninterface Props {\n  handleClose: () => void;\n  isOpen: boolean;\n  task: TaskType;\n}\n\nexport const FormModal = (props: Props) => {\n  // const handleOpen = () => {\n  //   setIsOpen(true);\n  // };\n  // const handleClose = () => {\n  //   setIsOpen(false);\n  // };\n\n  Modal.setAppElement(\"#root\");\n\n  return (\n    <div>\n      <Modal\n        isOpen={props.isOpen}\n        onRequestClose={props.handleClose}\n        style={styles}\n      >\n        <TaskBody task={props.task} handleOnClose={props.handleClose} />\n      </Modal>\n    </div>\n  );\n};\n\nexport default FormModal;\n","/Users/tksk/api-practice/api-practice/src/components/pages/modal/TaskBody.tsx",["110","111"],"import React, { useState, useContext } from \"react\";\nimport styles from \"./TaskModal.module.css\";\nimport { TaskRequest } from \"../../requests/TaskRequest\";\nimport { TaskType, BoardType } from \"../../interfaces/interface\";\nimport { DataContext } from \"../../../Guard\";\nimport { DragHandleOutlined } from \"@material-ui/icons\";\n\ninterface Props {\n  task: TaskType;\n  handleOnClose: () => void;\n}\n\nexport const TaskBody: React.FC<Props> = (props) => {\n  const { data, dispatch } = useContext(DataContext);\n  const [title, setTitle] = useState<string>(props.task && props.task.name);\n  const [boardId, setBoardId] = useState<number>(\n    (props.task && props.task.board_id) || 0\n    // ボードのモーダルからタスクを作成する場合にboard_idをどうするか考える\n  );\n  const [explanation, setExplanation] = useState<string>(\n    (props.task && props.task.explanation) || \"\"\n  );\n  const [deadlineDate, setDeadlineDate] = useState<string>(\n    (props.task && props.task.deadline_date) || \"\"\n  );\n  const onClickSubmit = async () => {\n    const requestData = {\n      id: props.task && props.task.id,\n      name: title,\n      board_id: boardId,\n      explanation: explanation,\n      deadline_date: deadlineDate,\n    };\n    try {\n      const tasks: TaskType[] = await TaskRequest(\"updateTasks\", {\n        data: requestData,\n      });\n      dispatch({ type: \"tasksUpdate\", payload: { task: tasks } });\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n    props.handleOnClose();\n  };\n\n  const handleOnDelete = async () => {\n    const requestData = {\n      id: props.task && props.task.id,\n      name: title,\n      board_id: boardId,\n    };\n    try {\n      const tasks: TaskType[] = await TaskRequest(\"deleteTasks\", {\n        data: requestData,\n      });\n      dispatch({ type: \"tasksUpdate\", payload: { task: tasks } });\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n  };\n\n  return (\n    <form className={styles.modal_body}>\n      <h2 className={styles.input_menu}></h2>\n      <div>\n        <h4 className={styles.input_title}>タイトル</h4>\n        <input\n          type=\"text\"\n          className={styles.textArea}\n          value={title}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n            setTitle(e.target.value)\n          }\n        />\n        <h4 className={styles.input_title}>説明</h4>\n        <textarea\n          className={styles.textArea}\n          placeholder=\"説明を記入してください\"\n          value={explanation}\n          onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n            setExplanation(e.target.value)\n          }\n        />\n        <h4 className={styles.input_title}>期限</h4>\n        <input\n          className={styles.input_date}\n          type=\"date\"\n          value={deadlineDate}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n            setDeadlineDate(e.target.value)\n          }\n        />\n        <h4 className={styles.input_title}>リスト</h4>\n        <select\n          className={styles.select}\n          value={boardId}\n          onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n            setBoardId(Number(e.target.value))\n          }\n        >\n          {data.boards &&\n            data.boards.map((board: BoardType) => {\n              return (\n                <option key={board.id} value={board.id}>\n                  {board.name}\n                </option>\n              );\n            })}\n        </select>\n      </div>\n\n      <input\n        className={styles.input_submit}\n        type=\"button\"\n        value={props.task ? \"更新\" : \"タスクを追加する\"}\n        onClick={() => onClickSubmit()}\n      />\n\n      {props.task && (\n        <button\n          className={styles.delete_button}\n          type=\"button\"\n          onClick={handleOnDelete}\n        >\n          このタスクを削除する\n        </button>\n      )}\n    </form>\n  );\n};\n","/Users/tksk/api-practice/api-practice/src/index.tsx",[],["112","113"],"/Users/tksk/api-practice/api-practice/src/components/Home.tsx",["114","115","116"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Header } from \"./pages/header/Header\";\nimport { Main } from \"./pages/main/Main\";\nimport \"./Home.css\";\n\ninterface Props {\n  isLoggedIn: boolean;\n  handleOnLogout: () => void;\n}\n\nexport const Home: React.FC<Props> = (props) => {\n  return (\n    <div className=\"main\">\n      <Header\n        handleOnLogout={props.handleOnLogout}\n        isLoggedIn={props.isLoggedIn}\n      />\n      <Main />\n    </div>\n  );\n};\n","/Users/tksk/api-practice/api-practice/src/components/pages/header/Header.tsx",[],["117","118"],"/Users/tksk/api-practice/api-practice/src/components/requests/BoardRequest.ts",[],"/Users/tksk/api-practice/api-practice/src/components/auth/AuthForm.tsx",[],"/Users/tksk/api-practice/api-practice/src/components/requests/TaskRequest.ts",[],"/Users/tksk/api-practice/api-practice/src/components/requests/authRequest.ts",[],"/Users/tksk/api-practice/api-practice/src/components/requests/AuthRequest.ts",[],"/Users/tksk/api-practice/api-practice/src/components/hooks/useDataReducer.ts",[],["119","120"],"/Users/tksk/api-practice/api-practice/src/components/pages/modal/BoardModal.tsx",["121","122"],"import React, { useState, useContext } from \"react\";\nimport Modal from \"react-modal\";\nimport { BoardType } from \"../../interfaces/interface\";\nimport { BoardRequest } from \"../../requests/BoardRequest\";\nimport styles from \"./boardModal.module.css\";\nimport { DataContext } from \"../../../Guard\";\n\nconst Style = {\n  overlay: {\n    backgroundColor: \"transparent\",\n  },\n  content: {\n    top: \"10%\",\n    left: \"60%\",\n    right: \"50%\",\n    height: \"75vh\",\n    width: \"20vw\",\n    marginLeft: \"-30vw\",\n    padding: \"2vw 10vw\",\n  },\n};\n\ninterface Props {\n  isOpen: boolean;\n  board: BoardType;\n  handleOnBoardModalClose: () => void;\n}\n\nModal.setAppElement(\"#root\");\n\nexport const BoardModal: React.FC<Props> = (props) => {\n  const { data, dispatch } = useContext(DataContext);\n\n  const handleOnDeleteBoard = async () => {\n    const requestData = {\n      id: props.board && props.board.id,\n      name: props.board && props.board.name,\n    };\n    try {\n      const boards: BoardType[] = await BoardRequest(\"deleteBoards\", {\n        data: requestData,\n      });\n      dispatch({ type: \"boardsUpdate\", payload: { board: boards } });\n      props.handleOnBoardModalClose();\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n  };\n\n  return (\n    <div>\n      <Modal\n        isOpen={props.isOpen}\n        onRequestClose={props.handleOnBoardModalClose}\n        style={Style}\n      >\n        <div>\n          <span\n            className={styles.board_delete_btn}\n            onClick={() => handleOnDeleteBoard()}\n          >\n            リストを削除する\n          </span>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n","/Users/tksk/api-practice/api-practice/src/components/interfaces/interface.ts",[],"/Users/tksk/api-practice/api-practice/src/components/pages/main/boardMenu/BoardMenu.tsx",["123","124"],{"ruleId":"125","severity":1,"message":"126","line":10,"column":11,"nodeType":"127","messageId":"128","endLine":10,"endColumn":15},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":75,"column":6,"nodeType":"135","endLine":75,"endColumn":8,"suggestions":"136"},{"ruleId":"133","severity":1,"message":"137","line":80,"column":6,"nodeType":"135","endLine":80,"endColumn":12,"suggestions":"138"},{"ruleId":"129","replacedBy":"139"},{"ruleId":"131","replacedBy":"140"},{"ruleId":"125","severity":1,"message":"141","line":1,"column":39,"nodeType":"127","messageId":"128","endLine":1,"endColumn":45},{"ruleId":"125","severity":1,"message":"126","line":22,"column":11,"nodeType":"127","messageId":"128","endLine":22,"endColumn":15},{"ruleId":"125","severity":1,"message":"142","line":4,"column":8,"nodeType":"127","messageId":"128","endLine":4,"endColumn":24},{"ruleId":"125","severity":1,"message":"143","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":25},{"ruleId":"125","severity":1,"message":"144","line":8,"column":11,"nodeType":"127","messageId":"128","endLine":8,"endColumn":21},{"ruleId":"125","severity":1,"message":"145","line":12,"column":11,"nodeType":"127","messageId":"128","endLine":12,"endColumn":20},{"ruleId":"125","severity":1,"message":"146","line":17,"column":17,"nodeType":"127","messageId":"128","endLine":17,"endColumn":25},{"ruleId":"125","severity":1,"message":"143","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":25},{"ruleId":"125","severity":1,"message":"147","line":6,"column":10,"nodeType":"127","messageId":"128","endLine":6,"endColumn":28},{"ruleId":"148","severity":1,"message":"149","line":63,"column":7,"nodeType":"150","endLine":63,"endColumn":41},{"ruleId":"129","replacedBy":"151"},{"ruleId":"131","replacedBy":"152"},{"ruleId":"125","severity":1,"message":"143","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":25},{"ruleId":"125","severity":1,"message":"153","line":1,"column":27,"nodeType":"127","messageId":"128","endLine":1,"endColumn":36},{"ruleId":"125","severity":1,"message":"154","line":2,"column":8,"nodeType":"127","messageId":"128","endLine":2,"endColumn":13},{"ruleId":"129","replacedBy":"155"},{"ruleId":"131","replacedBy":"156"},{"ruleId":"129","replacedBy":"157"},{"ruleId":"131","replacedBy":"158"},{"ruleId":"125","severity":1,"message":"143","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":25},{"ruleId":"125","severity":1,"message":"126","line":32,"column":11,"nodeType":"127","messageId":"128","endLine":32,"endColumn":15},{"ruleId":"125","severity":1,"message":"143","line":2,"column":17,"nodeType":"127","messageId":"128","endLine":2,"endColumn":25},{"ruleId":"125","severity":1,"message":"141","line":2,"column":27,"nodeType":"127","messageId":"128","endLine":2,"endColumn":33},"@typescript-eslint/no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["159"],"no-negated-in-lhs",["160"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkLoginStatus'. Either include it or remove the dependency array.","ArrayExpression",["161"],"React Hook useEffect has missing dependencies: 'checkLoginStatus' and 'fetchData'. Either include them or remove the dependency array.",["162"],["159"],["160"],"'useRef' is defined but never used.","'QueryBuilderIcon' is defined but never used.","'useState' is defined but never used.","'BoardsType' is defined but never used.","'TasksType' is defined but never used.","'dispatch' is assigned a value but never used.","'DragHandleOutlined' is defined but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement",["159"],["160"],"'useEffect' is defined but never used.","'axios' is defined but never used.",["159"],["160"],["159"],["160"],"no-global-assign","no-unsafe-negation",{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},"Update the dependencies array to be: [checkLoginStatus]",{"range":"167","text":"168"},"Update the dependencies array to be: [checkLoginStatus, fetchData, user]",{"range":"169","text":"170"},[2117,2119],"[checkLoginStatus]",[2189,2195],"[checkLoginStatus, fetchData, user]"]