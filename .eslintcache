[{"/Users/tksk/api-practice/api-practice/src/components/pages/main/addList/AddList.tsx":"1","/Users/tksk/api-practice/api-practice/src/components/pages/main/board/Board.tsx":"2","/Users/tksk/api-practice/api-practice/src/components/pages/main/task/Task.tsx":"3","/Users/tksk/api-practice/api-practice/src/reportWebVitals.ts":"4","/Users/tksk/api-practice/api-practice/src/components/pages/main/Main.tsx":"5","/Users/tksk/api-practice/api-practice/src/components/pages/modal/FormModal.tsx":"6","/Users/tksk/api-practice/api-practice/src/components/pages/modal/TaskBody.tsx":"7","/Users/tksk/api-practice/api-practice/src/index.tsx":"8","/Users/tksk/api-practice/api-practice/src/components/Home.tsx":"9","/Users/tksk/api-practice/api-practice/src/components/pages/header/Header.tsx":"10","/Users/tksk/api-practice/api-practice/src/components/requests/BoardRequest.ts":"11","/Users/tksk/api-practice/api-practice/src/components/auth/AuthForm.tsx":"12","/Users/tksk/api-practice/api-practice/src/components/requests/TaskRequest.ts":"13","/Users/tksk/api-practice/api-practice/src/components/requests/authRequest.ts":"14","/Users/tksk/api-practice/api-practice/src/components/requests/AuthRequest.ts":"15","/Users/tksk/api-practice/api-practice/src/components/hooks/useDataReducer.ts":"16","/Users/tksk/api-practice/api-practice/src/components/pages/modal/BoardModal.tsx":"17","/Users/tksk/api-practice/api-practice/src/components/interfaces/interface.ts":"18","/Users/tksk/api-practice/api-practice/src/App.tsx":"19"},{"size":1927,"mtime":1613835245715,"results":"20","hashOfConfig":"21"},{"size":4902,"mtime":1614763168261,"results":"22","hashOfConfig":"21"},{"size":1026,"mtime":1614761091866,"results":"23","hashOfConfig":"21"},{"size":425,"mtime":1611060678449,"results":"24","hashOfConfig":"21"},{"size":969,"mtime":1613726285741,"results":"25","hashOfConfig":"21"},{"size":1067,"mtime":1614761255317,"results":"26","hashOfConfig":"21"},{"size":4447,"mtime":1614763311570,"results":"27","hashOfConfig":"21"},{"size":292,"mtime":1614763164251,"results":"28","hashOfConfig":"21"},{"size":494,"mtime":1613714096789,"results":"29","hashOfConfig":"21"},{"size":836,"mtime":1614324633973,"results":"30","hashOfConfig":"21"},{"size":1227,"mtime":1613713252173,"results":"31","hashOfConfig":"21"},{"size":5205,"mtime":1614330264433,"results":"32","hashOfConfig":"21"},{"size":1460,"mtime":1614331308477,"results":"33","hashOfConfig":"21"},{"size":1116,"mtime":1613551607607,"results":"34","hashOfConfig":"21"},{"size":1208,"mtime":1613632214405,"results":"35","hashOfConfig":"21"},{"size":988,"mtime":1613711943829,"results":"36","hashOfConfig":"21"},{"size":4056,"mtime":1614763298140,"results":"37","hashOfConfig":"21"},{"size":341,"mtime":1614325377860,"results":"38","hashOfConfig":"21"},{"size":2876,"mtime":1614763441728,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},"xb9whp",{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"43"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/tksk/api-practice/api-practice/src/components/pages/main/addList/AddList.tsx",["87"],"import React, { useState, useContext } from \"react\";\nimport { DataContext } from \"../../../../Guard\";\nimport styles from \"./AddList.module.css\";\nimport { BoardRequest } from \"../../../requests/BoardRequest\";\nimport { BoardType } from \"../../../interfaces/interface\";\n\nexport const AddList = () => {\n  const [boardDisplay, setBoardDisplay] = useState(true);\n  const [name, setName] = useState(\"\");\n  const { data, dispatch } = useContext(DataContext);\n\n  const newData: BoardType = {\n    id: 0,\n    name: name,\n  };\n\n  const onClickSubmit = async () => {\n    try {\n      const boards: BoardType[] = await BoardRequest(\"createBoards\", {\n        data: newData,\n      });\n      dispatch({ type: \"boardsUpdate\", payload: { board: boards } });\n      setBoardDisplay(!boardDisplay);\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n  };\n\n  return (\n    <>\n      {boardDisplay ? (\n        <div\n          className={styles.add_board}\n          onClick={() => setBoardDisplay(!boardDisplay)}\n        >\n          <div>\n            <span>+</span> <span>リストを追加する</span>\n          </div>\n        </div>\n      ) : (\n        <div className={styles.add_board_form}>\n          <textarea\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              setName(e.target.value);\n            }}\n            className={styles.board_textarea}\n            placeholder=\"リストのタイトルを入力...\"\n          />\n          <div className={styles.add_submit_form}>\n            <input\n              type=\"submit\"\n              className={styles.add_list_submit}\n              value=\"リストを追加\"\n              onClick={onClickSubmit}\n            />\n            <div\n              className={styles.cancel_icon}\n              onClick={() => setBoardDisplay(!boardDisplay)}\n            >\n              ×\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n",["88","89"],"/Users/tksk/api-practice/api-practice/src/components/pages/main/board/Board.tsx",["90","91"],"import React, { useState, useContext, useRef } from \"react\";\nimport { BoardType, TaskType } from \"../../../interfaces/interface\";\nimport styles from \"./Board.module.css\";\nimport { Task } from \"../task/Task\";\nimport { BoardRequest } from \"../../../requests/BoardRequest\";\nimport { TaskRequest } from \"../../../requests/TaskRequest\";\nimport { DataContext } from \"../../../../App\";\nimport { BoardModal } from \"../../../../components/pages/modal/BoardModal\";\n\ninterface Props {\n  board: BoardType;\n  tasks?: TaskType[];\n}\n\nexport const Board: React.FC<Props> = (props) => {\n  const [boardOpen, setBoardOpen] = useState(true);\n  const [taskAddIsOpen, setTaskAddIsOpen] = useState<boolean>(false);\n  const [boardName, setBoardName] = useState(props.board.name);\n  const { data, dispatch } = useContext(DataContext);\n  const [taskName, setTaskName] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n\n  const onClickSubmit = async () => {\n    const requestTaskData: TaskType = {\n      name: taskName,\n      board_id: props.board.id,\n    };\n\n    try {\n      const tasks: TaskType[] = await TaskRequest(\"createTasks\", {\n        data: requestTaskData,\n      });\n      dispatch({ type: \"tasksUpdate\", payload: { task: tasks } });\n      setTaskAddIsOpen(!taskAddIsOpen);\n    } catch (err) {\n      alert(\"通信に失敗しました。\");\n    }\n  };\n\n  const onKeySubmit = async (e: React.KeyboardEvent) => {\n    const requestBoardData: BoardType = {\n      id: props.board.id,\n      name: boardName,\n    };\n\n    if (e.key === \"Enter\") {\n      try {\n        const boards: BoardType[] = await BoardRequest(\"updateBoards\", {\n          data: requestBoardData,\n        });\n        dispatch({ type: \"boardsUpdate\", payload: { board: boards } });\n        setBoardOpen(!boardOpen);\n      } catch (err) {\n        alert(\"通信に失敗しました。\");\n      }\n    } else {\n      return;\n    }\n  };\n\n  const handleOnBoardModalClose = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleOnBoardOpen = () => {\n    setBoardOpen(!boardOpen);\n    setBoardName(props.board.name);\n  };\n\n  const clickOnTaskAdd = () => {\n    setTaskAddIsOpen(!taskAddIsOpen);\n  };\n\n  return (\n    <div className={styles.contents}>\n      {boardOpen ? (\n        <div className={styles.board_name}>\n          <div\n            onClick={() => handleOnBoardOpen()}\n            className={styles.board_name_title}\n          >\n            {props.board.name}\n          </div>\n          <div className={styles.board_icon} onClick={() => setIsOpen(!isOpen)}>\n            :\n          </div>\n\n          <BoardModal\n            isOpen={isOpen}\n            board={props.board}\n            handleOnBoardModalClose={handleOnBoardModalClose}\n            tasks={props.tasks}\n          />\n        </div>\n      ) : (\n        <div className={styles.board_name}>\n          <textarea\n            className={styles.board_textarea}\n            placeholder={props.board.name}\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n              setBoardName(e.target.value);\n            }}\n            onKeyPress={(e: React.KeyboardEvent) => onKeySubmit(e)}\n          />\n\n          {/* ↑リストのタイトルの追加を行いたい(あと回し)→理想はenterキーをおしたり、スコープ外をクリックすると更新がかかる感じにしたい */}\n\n          <div\n            className={styles.board_cancel_btn}\n            onClick={() => setBoardOpen(!boardOpen)}\n          >\n            ×\n          </div>\n        </div>\n      )}\n      <div className={styles.task_lists}>\n        {props.tasks &&\n          props.tasks.map((task: TaskType) => {\n            return <Task task={task} board={props.board} key={task.id} />;\n          })}\n      </div>\n      {taskAddIsOpen ? (\n        <>\n          <div className={styles.task_field}>\n            <textarea\n              placeholder=\"カードのタイトルを入力してください\"\n              className={styles.task_textarea}\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\n                setTaskName(e.target.value)\n              }\n            />\n          </div>\n          <div className={styles.add_submit_form}>\n            <input\n              type=\"submit\"\n              className={styles.add_task_submit}\n              value=\"タスクを追加する\"\n              onClick={() => onClickSubmit()}\n            />\n            <div\n              className={styles.task_cancel_btn}\n              onClick={() => setTaskAddIsOpen(!taskAddIsOpen)}\n            >\n              ×\n            </div>\n          </div>\n        </>\n      ) : (\n        <div className={styles.add_task} onClick={() => clickOnTaskAdd()}>\n          <div> + タスクを追加する</div>\n        </div>\n      )}\n      {/* <div className={`popup-menu ${isShown ? \"shown\" : \"\"}`}> */}\n      {/* <BoardMenu isShown={isShown} /> */}\n      {/* </div> */}\n    </div>\n  );\n};\n","/Users/tksk/api-practice/api-practice/src/components/pages/main/task/Task.tsx",[],"/Users/tksk/api-practice/api-practice/src/reportWebVitals.ts",[],"/Users/tksk/api-practice/api-practice/src/components/pages/main/Main.tsx",["92","93","94","95"],"import React, { useState, useContext } from \"react\";\nimport { DataContext } from \"../../../Guard\";\nimport { Board } from \"./board/Board\";\nimport { BoardType, TaskType } from \"../../interfaces/interface\";\nimport styles from \"./Main.module.css\";\nimport { AddList } from \"../main/addList/AddList\";\n\ninterface BoardsType {\n  boards: BoardType[];\n}\n\ninterface TasksType {\n  tasks: TaskType[];\n}\n\nexport const Main = () => {\n  const { data, dispatch } = useContext(DataContext);\n  return (\n    <div className={styles.main}>\n      {data.boards &&\n        data.boards.map((ele) => {\n          const tasks = data.tasks.filter((task) => {\n            return task.board_id === ele.id;\n          });\n          return (\n            <div key={ele.id} className={styles.board_list}>\n              <Board tasks={tasks} board={ele} key={ele.id} />\n            </div>\n          );\n        })}\n      <div className={styles.board_list}>\n        <AddList />\n      </div>\n    </div>\n  );\n};\n","/Users/tksk/api-practice/api-practice/src/components/pages/modal/FormModal.tsx",["96"],"/Users/tksk/api-practice/api-practice/src/components/pages/modal/TaskBody.tsx",["97"],"/Users/tksk/api-practice/api-practice/src/index.tsx",[],"/Users/tksk/api-practice/api-practice/src/components/Home.tsx",["98","99","100"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Header } from \"./pages/header/Header\";\nimport { Main } from \"./pages/main/Main\";\nimport \"./Home.css\";\n\ninterface Props {\n  isLoggedIn: boolean;\n  handleOnLogout: () => void;\n}\n\nexport const Home: React.FC<Props> = (props) => {\n  return (\n    <div className=\"main\">\n      <Header\n        handleOnLogout={props.handleOnLogout}\n        isLoggedIn={props.isLoggedIn}\n      />\n      <Main />\n    </div>\n  );\n};\n",["101","102"],"/Users/tksk/api-practice/api-practice/src/components/pages/header/Header.tsx",[],["103","104"],"/Users/tksk/api-practice/api-practice/src/components/requests/BoardRequest.ts",[],"/Users/tksk/api-practice/api-practice/src/components/auth/AuthForm.tsx",[],"/Users/tksk/api-practice/api-practice/src/components/requests/TaskRequest.ts",[],"/Users/tksk/api-practice/api-practice/src/components/requests/authRequest.ts",[],"/Users/tksk/api-practice/api-practice/src/components/requests/AuthRequest.ts",[],["105","106"],"/Users/tksk/api-practice/api-practice/src/components/hooks/useDataReducer.ts",[],["107","108"],"/Users/tksk/api-practice/api-practice/src/components/pages/modal/BoardModal.tsx",["109"],"/Users/tksk/api-practice/api-practice/src/components/interfaces/interface.ts",[],"/Users/tksk/api-practice/api-practice/src/App.tsx",["110","111"],{"ruleId":"112","severity":1,"message":"113","line":10,"column":11,"nodeType":"114","messageId":"115","endLine":10,"endColumn":15},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"112","severity":1,"message":"120","line":1,"column":39,"nodeType":"114","messageId":"115","endLine":1,"endColumn":45},{"ruleId":"112","severity":1,"message":"113","line":19,"column":11,"nodeType":"114","messageId":"115","endLine":19,"endColumn":15},{"ruleId":"112","severity":1,"message":"121","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":25},{"ruleId":"112","severity":1,"message":"122","line":8,"column":11,"nodeType":"114","messageId":"115","endLine":8,"endColumn":21},{"ruleId":"112","severity":1,"message":"123","line":12,"column":11,"nodeType":"114","messageId":"115","endLine":12,"endColumn":20},{"ruleId":"112","severity":1,"message":"124","line":17,"column":17,"nodeType":"114","messageId":"115","endLine":17,"endColumn":25},{"ruleId":"112","severity":1,"message":"121","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":25},{"ruleId":"125","severity":1,"message":"126","line":76,"column":7,"nodeType":"127","endLine":76,"endColumn":41},{"ruleId":"112","severity":1,"message":"121","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":25},{"ruleId":"112","severity":1,"message":"128","line":1,"column":27,"nodeType":"114","messageId":"115","endLine":1,"endColumn":36},{"ruleId":"112","severity":1,"message":"129","line":2,"column":8,"nodeType":"114","messageId":"115","endLine":2,"endColumn":13},{"ruleId":"116","replacedBy":"130"},{"ruleId":"118","replacedBy":"131"},{"ruleId":"116","replacedBy":"132"},{"ruleId":"118","replacedBy":"133"},{"ruleId":"116","replacedBy":"134"},{"ruleId":"118","replacedBy":"135"},{"ruleId":"116","replacedBy":"136"},{"ruleId":"118","replacedBy":"137"},{"ruleId":"112","severity":1,"message":"113","line":36,"column":11,"nodeType":"114","messageId":"115","endLine":36,"endColumn":15},{"ruleId":"138","severity":1,"message":"139","line":75,"column":6,"nodeType":"140","endLine":75,"endColumn":8,"suggestions":"141"},{"ruleId":"138","severity":1,"message":"142","line":80,"column":6,"nodeType":"140","endLine":80,"endColumn":12,"suggestions":"143"},"@typescript-eslint/no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["144"],"no-negated-in-lhs",["145"],"'useRef' is defined but never used.","'useState' is defined but never used.","'BoardsType' is defined but never used.","'TasksType' is defined but never used.","'dispatch' is assigned a value but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'useEffect' is defined but never used.","'axios' is defined but never used.",["144"],["145"],["144"],["145"],["144"],["145"],["144"],["145"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkLoginStatus'. Either include it or remove the dependency array.","ArrayExpression",["146"],"React Hook useEffect has missing dependencies: 'checkLoginStatus' and 'fetchData'. Either include them or remove the dependency array.",["147"],"no-global-assign","no-unsafe-negation",{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},"Update the dependencies array to be: [checkLoginStatus]",{"range":"152","text":"153"},"Update the dependencies array to be: [checkLoginStatus, fetchData, user]",{"range":"154","text":"155"},[2115,2117],"[checkLoginStatus]",[2187,2193],"[checkLoginStatus, fetchData, user]"]